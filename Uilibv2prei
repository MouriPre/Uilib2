local NebulaUI = {}
NebulaUI.__index = NebulaUI

-- Utility Functions
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")

-- Configuration
NebulaUI.Config = {
    Theme = {
        Primary = Color3.fromRGB(29, 32, 40),
        Secondary = Color3.fromRGB(35, 38, 46),
        Accent = Color3.fromRGB(86, 180, 255),
        Text = Color3.fromRGB(240, 240, 240),
        SubText = Color3.fromRGB(180, 180, 180),
        Background = Color3.fromRGB(22, 24, 32),
        Success = Color3.fromRGB(72, 199, 142),
        Error = Color3.fromRGB(245, 71, 71),
        Warning = Color3.fromRGB(255, 170, 0)
    },
    Animation = {
        TweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        SpringInfo = {
            Speed = 20,
            Damping = 1,
            MaxSpeed = 100
        }
    }
}

function NebulaUI.new(title)
    local gui = {}
    setmetatable(gui, NebulaUI)

    -- Main GUI Container
    gui.ScreenGui = Instance.new("ScreenGui")
    gui.ScreenGui.Name = "NebulaUI"
    gui.ScreenGui.ResetOnSpawn = false
    gui.ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Background blur effect
    local blur = Instance.new("BlurEffect")
    blur.Size = 10
    blur.Parent = game:GetService("Lighting")
    
    -- Main Container
    gui.MainContainer = Instance.new("Frame")
    gui.MainContainer.Name = "MainContainer"
    gui.MainContainer.Size = UDim2.new(0, 600, 0, 400)
    gui.MainContainer.Position = UDim2.new(0.5, -300, 0.5, -200)
    gui.MainContainer.BackgroundColor3 = NebulaUI.Config.Theme.Background
    gui.MainContainer.BackgroundTransparency = 0.1
    gui.MainContainer.ClipsDescendants = true
    gui.MainContainer.Parent = gui.ScreenGui

    -- Add glass morphism effect
    local glassEffect = Instance.new("ImageLabel")
    glassEffect.BackgroundTransparency = 1
    glassEffect.Image = "rbxassetid://4641149554"
    glassEffect.ImageColor3 = Color3.fromRGB(255, 255, 255)
    glassEffect.ImageTransparency = 0.95
    glassEffect.Size = UDim2.new(1, 0, 1, 0)
    glassEffect.Parent = gui.MainContainer

    -- Main Corner
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 12)
    corner.Parent = gui.MainContainer

    -- Top Bar
    gui.TopBar = Instance.new("Frame")
    gui.TopBar.Name = "TopBar"
    gui.TopBar.Size = UDim2.new(1, 0, 0, 40)
    gui.TopBar.BackgroundColor3 = NebulaUI.Config.Theme.Primary
    gui.TopBar.BackgroundTransparency = 0.5
    gui.TopBar.Parent = gui.MainContainer

    local topCorner = Instance.new("UICorner")
    topCorner.CornerRadius = UDim.new(0, 12)
    topCorner.Parent = gui.TopBar

    -- Title
    gui.Title = Instance.new("TextLabel")
    gui.Title.Name = "Title"
    gui.Title.Size = UDim2.new(1, -20, 1, 0)
    gui.Title.Position = UDim2.new(0, 20, 0, 0)
    gui.Title.BackgroundTransparency = 1
    gui.Title.Text = title or "NebulaUI"
    gui.Title.TextColor3 = NebulaUI.Config.Theme.Text
    gui.Title.TextSize = 18
    gui.Title.Font = Enum.Font.GothamBold
    gui.Title.TextXAlignment = Enum.TextXAlignment.Left
    gui.Title.Parent = gui.TopBar

    -- Close Button
    gui.CloseButton = Instance.new("ImageButton")
    gui.CloseButton.Name = "CloseButton"
    gui.CloseButton.Size = UDim2.new(0, 24, 0, 24)
    gui.CloseButton.Position = UDim2.new(1, -32, 0, 8)
    gui.CloseButton.BackgroundTransparency = 1
    gui.CloseButton.Image = "rbxassetid://6031094670"
    gui.CloseButton.ImageColor3 = NebulaUI.Config.Theme.Text
    gui.CloseButton.Parent = gui.TopBar

    -- Content Container
    gui.ContentContainer = Instance.new("Frame")
    gui.ContentContainer.Name = "ContentContainer"
    gui.ContentContainer.Size = UDim2.new(1, -20, 1, -60)
    gui.ContentContainer.Position = UDim2.new(0, 10, 0, 50)
    gui.ContentContainer.BackgroundTransparency = 1
    gui.ContentContainer.Parent = gui.MainContainer

    -- Navigation
    gui.Navigation = Instance.new("Frame")
    gui.Navigation.Name = "Navigation"
    gui.Navigation.Size = UDim2.new(0, 150, 1, 0)
    gui.Navigation.BackgroundColor3 = NebulaUI.Config.Theme.Primary
    gui.Navigation.BackgroundTransparency = 0.7
    gui.Navigation.Parent = gui.ContentContainer

    local navCorner = Instance.new("UICorner")
    navCorner.CornerRadius = UDim.new(0, 8)
    navCorner.Parent = gui.Navigation

    -- Tab Container
    gui.TabContainer = Instance.new("Frame")
    gui.TabContainer.Name = "TabContainer"
    gui.TabContainer.Size = UDim2.new(1, -160, 1, 0)
    gui.TabContainer.Position = UDim2.new(0, 160, 0, 0)
    gui.TabContainer.BackgroundTransparency = 1
    gui.TabContainer.Parent = gui.ContentContainer

    -- Setup animation and dragging
    gui:SetupAnimations()
    gui:MakeDraggable()

    -- Parent to CoreGui if possible
    pcall(function()
        gui.ScreenGui.Parent = CoreGui
    end)
    
    if not gui.ScreenGui.Parent then
        gui.ScreenGui.Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
    end

    return gui
end

function NebulaUI:SetupAnimations()
    -- Open/Close animations
    self.MainContainer.AnchorPoint = Vector2.new(0.5, 0.5)
    self.MainContainer.Position = UDim2.new(0.5, 0, 0.5, 0)
    self.MainContainer.Size = UDim2.new(0, 0, 0, 0)
    
    local openTween = TweenService:Create(
        self.MainContainer,
        TweenInfo.new(0.6, Enum.EasingStyle.Back, Enum.EasingDirection.Out),
        {Size = UDim2.new(0, 600, 0, 400)}
    )
    openTween:Play()
end

function NebulaUI:MakeDraggable()
    local dragging = false
    local dragStart = nil
    local startPos = nil

    self.TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = self.MainContainer.Position
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
            local delta = input.Position - dragStart
            self.MainContainer.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
end

-- Tab System
function NebulaUI:CreateTab(name, icon)
    local tab = {}
    
    -- Tab Button
    tab.Button = Instance.new("TextButton")
    tab.Button.Name = name.."Tab"
    tab.Button.Size = UDim2.new(1, -20, 0, 36)
    tab.Button.Position = UDim2.new(0, 10, 0, #self.Navigation:GetChildren() * 46)
    tab.Button.BackgroundColor3 = NebulaUI.Config.Theme.Secondary
    tab.Button.BackgroundTransparency = 1
    tab.Button.Text = ""
    tab.Button.Parent = self.Navigation

    local tabCorner = Instance.new("UICorner")
    tabCorner.CornerRadius = UDim.new(0, 6)
    tabCorner.Parent = tab.Button

    -- Tab Icon
    if icon then
        local iconImage = Instance.new("ImageLabel")
        iconImage.Size = UDim2.new(0, 20, 0, 20)
        iconImage.Position = UDim2.new(0, 10, 0.5, -10)
        iconImage.BackgroundTransparency = 1
        iconImage.Image = icon
        iconImage.ImageColor3 = NebulaUI.Config.Theme.SubText
        iconImage.Parent = tab.Button
    end

    -- Tab Name
    local tabName = Instance.new("TextLabel")
    tabName.Size = UDim2.new(1, icon and -40 or -20, 1, 0)
    tabName.Position = UDim2.new(0, icon and 40 or 10, 0, 0)
    tabName.BackgroundTransparency = 1
    tabName.Text = name
    tabName.TextColor3 = NebulaUI.Config.Theme.SubText
    tabName.TextSize = 14
    tabName.Font = Enum.Font.GothamMedium
    tabName.TextXAlignment = Enum.TextXAlignment.Left
    tabName.Parent = tab.Button

    -- Tab Content
    tab.Content = Instance.new("ScrollingFrame")
    tab.Content.Name = name.."Content"
    tab.Content.Size = UDim2.new(1, 0, 1, 0)
    tab.Content.BackgroundTransparency = 1
    tab.Content.ScrollBarThickness = 2
    tab.Content.ScrollBarImageColor3 = NebulaUI.Config.Theme.Accent
    tab.Content.Visible = false
    tab.Content.Parent = self.TabContainer

    -- Add padding and list layout to content
    local padding = Instance.new("UIPadding")
    padding.PaddingTop = UDim.new(0, 10)
    padding.PaddingLeft = UDim.new(0, 10)
    padding.PaddingRight = UDim.new(0, 10)
    padding.Parent = tab.Content

    local listLayout = Instance.new("UIListLayout")
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.Padding = UDim.new(0, 10)
    listLayout.Parent = tab.Content

    -- Tab Selection Logic
    tab.Button.MouseButton1Click:Connect(function()
        -- Hide all other tabs
        for _, child in pairs(self.TabContainer:GetChildren()) do
            if child:IsA("ScrollingFrame") then
                child.Visible = false
            end
        end
        
        -- Show selected tab
        tab.Content.Visible = true
        
        -- Update appearance of all tab buttons
        for _, child in pairs(self.Navigation:GetChildren()) do
            if child:IsA("TextButton") then
                TweenService:Create(child, NebulaUI.Config.Animation.TweenInfo, {
                    BackgroundTransparency = 1
                }):Play()
                
                local textLabel = child:FindFirstChildOfClass("TextLabel")
                if textLabel then
                    TweenService:Create(textLabel, NebulaUI.Config.Animation.TweenInfo, {
                        TextColor3 = NebulaUI.Config.Theme.SubText
                    }):Play()
                end
                
                local icon = child:FindFirstChildOfClass("ImageLabel")
                if icon then
                    TweenService:Create(icon, NebulaUI.Config.Animation.TweenInfo, {
                        ImageColor3 = NebulaUI.Config.Theme.SubText
                    }):Play()
                end
            end
        end
        
        -- Update selected tab appearance
        TweenService:Create(tab.Button, NebulaUI.Config.Animation.TweenInfo, {
            BackgroundTransparency = 0
        }):Play()
        
        TweenService:Create(tabName, NebulaUI.Config.Animation.TweenInfo, {
            TextColor3 = NebulaUI.Config.Theme.Text
        }):Play()
        
        if icon then
            local iconLabel = tab.Button:FindFirstChildOfClass("ImageLabel")
            if iconLabel then
                TweenService:Create(iconLabel, NebulaUI.Config.Animation.TweenInfo, {
                    ImageColor3 = NebulaUI.Config.Theme.Text
                }):Play()
            end
        end
    end)

    return tab
end

-- Element creation methods will go here...
-- (Button, Toggle, Slider, Dropdown, etc.)
-- Thêm vào phần cuối file NebulaUI, trước return

-- Button Element
function NebulaUI:CreateButton(tab, text, callback)
    local button = Instance.new("TextButton")
    button.Name = "Button"
    button.Size = UDim2.new(1, 0, 0, 36)
    button.BackgroundColor3 = self.Config.Theme.Secondary
    button.BackgroundTransparency = 0.2
    button.Text = ""
    button.AutoButtonColor = false
    button.Parent = tab.Content

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = button

    local buttonText = Instance.new("TextLabel")
    buttonText.Size = UDim2.new(1, -20, 1, 0)
    buttonText.Position = UDim2.new(0, 10, 0, 0)
    buttonText.BackgroundTransparency = 1
    buttonText.Text = text
    buttonText.TextColor3 = self.Config.Theme.Text
    buttonText.TextSize = 14
    buttonText.Font = Enum.Font.GothamMedium
    buttonText.TextXAlignment = Enum.TextXAlignment.Left
    buttonText.Parent = button

    -- Hover & Click Effects
    button.MouseEnter:Connect(function()
        TweenService:Create(button, self.Config.Animation.TweenInfo, {
            BackgroundTransparency = 0
        }):Play()
    end)

    button.MouseLeave:Connect(function()
        TweenService:Create(button, self.Config.Animation.TweenInfo, {
            BackgroundTransparency = 0.2
        }):Play()
    end)

    button.MouseButton1Down:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.1), {
            Size = UDim2.new(1, -4, 0, 32)
        }):Play()
    end)

    button.MouseButton1Up:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.1), {
            Size = UDim2.new(1, 0, 0, 36)
        }):Play()
        
        if callback then
            callback()
        end
    end)

    return button
end

-- Toggle Element
function NebulaUI:CreateToggle(tab, text, default, callback)
    local toggle = Instance.new("TextButton")
    toggle.Name = "Toggle"
    toggle.Size = UDim2.new(1, 0, 0, 36)
    toggle.BackgroundColor3 = self.Config.Theme.Secondary
    toggle.BackgroundTransparency = 0.2
    toggle.Text = ""
    toggle.AutoButtonColor = false
    toggle.Parent = tab.Content

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = toggle

    local toggleText = Instance.new("TextLabel")
    toggleText.Size = UDim2.new(1, -60, 1, 0)
    toggleText.Position = UDim2.new(0, 10, 0, 0)
    toggleText.BackgroundTransparency = 1
    toggleText.Text = text
    toggleText.TextColor3 = self.Config.Theme.Text
    toggleText.TextSize = 14
    toggleText.Font = Enum.Font.GothamMedium
    toggleText.TextXAlignment = Enum.TextXAlignment.Left
    toggleText.Parent = toggle

    -- Toggle Indicator
    local indicator = Instance.new("Frame")
    indicator.Name = "Indicator"
    indicator.Size = UDim2.new(0, 40, 0, 20)
    indicator.Position = UDim2.new(1, -50, 0.5, -10)
    indicator.BackgroundColor3 = self.Config.Theme.Primary
    indicator.BackgroundTransparency = 0
    indicator.Parent = toggle

    local indicatorCorner = Instance.new("UICorner")
    indicatorCorner.CornerRadius = UDim.new(1, 0)
    indicatorCorner.Parent = indicator

    local knob = Instance.new("Frame")
    knob.Name = "Knob"
    knob.Size = UDim2.new(0, 16, 0, 16)
    knob.Position = UDim2.new(0, 2, 0.5, -8)
    knob.BackgroundColor3 = self.Config.Theme.Text
    knob.Parent = indicator

    local knobCorner = Instance.new("UICorner")
    knobCorner.CornerRadius = UDim.new(1, 0)
    knobCorner.Parent = knob

    -- Toggle State
    local enabled = default or false
    local function updateToggle()
        if enabled then
            TweenService:Create(indicator, self.Config.Animation.TweenInfo, {
                BackgroundColor3 = self.Config.Theme.Accent
            }):Play()
            TweenService:Create(knob, self.Config.Animation.TweenInfo, {
                Position = UDim2.new(1, -18, 0.5, -8)
            }):Play()
        else
            TweenService:Create(indicator, self.Config.Animation.TweenInfo, {
                BackgroundColor3 = self.Config.Theme.Primary
            }):Play()
            TweenService:Create(knob, self.Config.Animation.TweenInfo, {
                Position = UDim2.new(0, 2, 0.5, -8)
            }):Play()
        end
        
        if callback then
            callback(enabled)
        end
    end

    -- Initial state
    updateToggle()

    -- Hover Effect
    toggle.MouseEnter:Connect(function()
        TweenService:Create(toggle, self.Config.Animation.TweenInfo, {
            BackgroundTransparency = 0
        }):Play()
    end)

    toggle.MouseLeave:Connect(function()
        TweenService:Create(toggle, self.Config.Animation.TweenInfo, {
            BackgroundTransparency = 0.2
        }):Play()
    end)

    -- Toggle Logic
    toggle.MouseButton1Click:Connect(function()
        enabled = not enabled
        updateToggle()
    end)

    return {
        Instance = toggle,
        SetState = function(state)
            enabled = state
            updateToggle()
        end,
        GetState = function()
            return enabled
        end
    }
end

-- Thêm vào phần cuối file NebulaUI, trước return

-- Slider Element
function NebulaUI:CreateSlider(tab, text, min, max, default, callback)
    local slider = Instance.new("Frame")
    slider.Name = "Slider"
    slider.Size = UDim2.new(1, 0, 0, 50)
    slider.BackgroundColor3 = self.Config.Theme.Secondary
    slider.BackgroundTransparency = 0.2
    slider.Parent = tab.Content

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = slider

    local sliderText = Instance.new("TextLabel")
    sliderText.Size = UDim2.new(1, -20, 0, 20)
    sliderText.Position = UDim2.new(0, 10, 0, 5)
    sliderText.BackgroundTransparency = 1
    sliderText.Text = text
    sliderText.TextColor3 = self.Config.Theme.Text
    sliderText.TextSize = 14
    sliderText.Font = Enum.Font.GothamMedium
    sliderText.TextXAlignment = Enum.TextXAlignment.Left
    sliderText.Parent = slider

    local valueText = Instance.new("TextLabel")
    valueText.Size = UDim2.new(0, 50, 0, 20)
    valueText.Position = UDim2.new(1, -60, 0, 5)
    valueText.BackgroundTransparency = 1
    valueText.Text = tostring(default)
    valueText.TextColor3 = self.Config.Theme.Text
    valueText.TextSize = 14
    valueText.Font = Enum.Font.GothamMedium
    valueText.TextXAlignment = Enum.TextXAlignment.Right
    valueText.Parent = slider

    local sliderBar = Instance.new("Frame")
    sliderBar.Name = "SliderBar"
    sliderBar.Size = UDim2.new(1, -20, 0, 4)
    sliderBar.Position = UDim2.new(0, 10, 0, 35)
    sliderBar.BackgroundColor3 = self.Config.Theme.Primary
    sliderBar.Parent = slider

    local sliderBarCorner = Instance.new("UICorner")
    sliderBarCorner.CornerRadius = UDim.new(1, 0)
    sliderBarCorner.Parent = sliderBar

    local sliderFill = Instance.new("Frame")
    sliderFill.Name = "SliderFill"
    sliderFill.Size = UDim2.new(0, 0, 1, 0)
    sliderFill.BackgroundColor3 = self.Config.Theme.Accent
    sliderFill.Parent = sliderBar

    local sliderFillCorner = Instance.new("UICorner")
    sliderFillCorner.CornerRadius = UDim.new(1, 0)
    sliderFillCorner.Parent = sliderFill

    local knob = Instance.new("TextButton")
    knob.Name = "Knob"
    knob.Size = UDim2.new(0, 16, 0, 16)
    knob.Position = UDim2.new(0, -8, 0.5, -8)
    knob.BackgroundColor3 = self.Config.Theme.Text
    knob.Text = ""
    knob.AutoButtonColor = false
    knob.Parent = sliderFill

    local knobCorner = Instance.new("UICorner")
    knobCorner.CornerRadius = UDim.new(1, 0)
    knobCorner.Parent = knob

    -- Slider Logic
    local UserInputService = game:GetService("UserInputService")
    local TweenService = game:GetService("TweenService")
    local dragging = false
    local value = default or min

    local function updateSlider(input)
        local pos = UDim2.new(math.clamp((input.Position.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X, 0, 1), 0, 1, 0)
        TweenService:Create(sliderFill, TweenInfo.new(0.1), {Size = pos}):Play()
        
        local val = math.floor(((pos.X.Scale * (max - min)) + min) * 10) / 10
        valueText.Text = tostring(val)
        value = val
        
        if callback then
            callback(val)
        end
    end

    knob.MouseButton1Down:Connect(function()
        dragging = true
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateSlider(input)
        end
    end)

    -- Set default value
    local defaultScale = (default - min) / (max - min)
    sliderFill.Size = UDim2.new(defaultScale, 0, 1, 0)

    return {
        Instance = slider,
        SetValue = function(val)
            value = math.clamp(val, min, max)
            local scale = (value - min) / (max - min)
            sliderFill.Size = UDim2.new(scale, 0, 1, 0)
            valueText.Text = tostring(value)
            if callback then
                callback(value)
            end
        end,
        GetValue = function()
            return value
        end
    }
end

-- Dropdown Element
function NebulaUI:CreateDropdown(tab, text, options, default, callback)
    local dropdown = Instance.new("Frame")
    dropdown.Name = "Dropdown"
    dropdown.Size = UDim2.new(1, 0, 0, 36)
    dropdown.BackgroundColor3 = self.Config.Theme.Secondary
    dropdown.BackgroundTransparency = 0.2
    dropdown.ClipsDescendants = true
    dropdown.Parent = tab.Content

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = dropdown

    local dropdownButton = Instance.new("TextButton")
    dropdownButton.Name = "DropdownButton"
    dropdownButton.Size = UDim2.new(1, 0, 0, 36)
    dropdownButton.BackgroundTransparency = 1
    dropdownButton.Text = ""
    dropdownButton.Parent = dropdown

    local dropdownText = Instance.new("TextLabel")
    dropdownText.Size = UDim2.new(1, -40, 1, 0)
    dropdownText.Position = UDim2.new(0, 10, 0, 0)
    dropdownText.BackgroundTransparency = 1
    dropdownText.Text = text
    dropdownText.TextColor3 = self.Config.Theme.Text
    dropdownText.TextSize = 14
    dropdownText.Font = Enum.Font.GothamMedium
    dropdownText.TextXAlignment = Enum.TextXAlignment.Left
    dropdownText.Parent = dropdownButton

    local selectedText = Instance.new("TextLabel")
    selectedText.Size = UDim2.new(0, 100, 1, 0)
    selectedText.Position = UDim2.new(1, -110, 0, 0)
    selectedText.BackgroundTransparency = 1
    selectedText.Text = default or "Select"
    selectedText.TextColor3 = self.Config.Theme.Accent
    selectedText.TextSize = 14
    selectedText.Font = Enum.Font.GothamMedium
    selectedText.TextXAlignment = Enum.TextXAlignment.Right
    selectedText.Parent = dropdownButton

    local arrow = Instance.new("ImageLabel")
    arrow.Size = UDim2.new(0, 20, 0, 20)
    arrow.Position = UDim2.new(1, -30, 0.5, -10)
    arrow.BackgroundTransparency = 1
    arrow.Image = "rbxassetid://6034818372"
    arrow.ImageColor3 = self.Config.Theme.Text
    arrow.Parent = dropdownButton

    -- Options Container
    local optionsFrame = Instance.new("Frame")
    optionsFrame.Name = "Options"
    optionsFrame.Size = UDim2.new(1, -20, 0, #options * 30)
    optionsFrame.Position = UDim2.new(0, 10, 0, 46)
    optionsFrame.BackgroundTransparency = 1
    optionsFrame.Visible = false
    optionsFrame.Parent = dropdown

    local listLayout = Instance.new("UIListLayout")
    listLayout.Padding = UDim.new(0, 5)
    listLayout.Parent = optionsFrame

    -- Create option buttons
    local selected = default
    local isOpen = false

    local function createOption(optionText)
        local option = Instance.new("TextButton")
        option.Size = UDim2.new(1, 0, 0, 25)
        option.BackgroundColor3 = self.Config.Theme.Primary
        option.BackgroundTransparency = 0.2
        option.Text = optionText
        option.TextColor3 = self.Config.Theme.Text
        option.TextSize = 14
        option.Font = Enum.Font.GothamMedium
        option.Parent = optionsFrame

        local optionCorner = Instance.new("UICorner")
        optionCorner.CornerRadius = UDim.new(0, 4)
        optionCorner.Parent = option

        option.MouseButton1Click:Connect(function()
            selected = optionText
            selectedText.Text = optionText
            if callback then
                callback(optionText)
            end
            
            -- Close dropdown
            TweenService:Create(dropdown, TweenInfo.new(0.2), {
                Size = UDim2.new(1, 0, 0, 36)
            }):Play()
            TweenService:Create(arrow, TweenInfo.new(0.2), {
                Rotation = 0
            }):Play()
            isOpen = false
            optionsFrame.Visible = false
        end)

        return option
    end

    for _, option in ipairs(options) do
        createOption(option)
    end

    -- Toggle dropdown
    dropdownButton.MouseButton1Click:Connect(function()
        isOpen = not isOpen
        if isOpen then
            dropdown.Size = UDim2.new(1, 0, 0, 46 + optionsFrame.AbsoluteSize.Y)
            TweenService:Create(arrow, TweenInfo.new(0.2), {
                Rotation = 180
            }):Play()
            optionsFrame.Visible = true
        else
            TweenService:Create(dropdown, TweenInfo.new(0.2), {
                Size = UDim2.new(1, 0, 0, 36)
            }):Play()
            TweenService:Create(arrow, TweenInfo.new(0.2), {
                Rotation = 0
            }):Play()
            optionsFrame.Visible = false
        end
    end)

    return {
        Instance = dropdown,
        SetValue = function(value)
            selected = value
            selectedText.Text = value
            if callback then
                callback(value)
            end
        end,
        GetValue = function()
            return selected
        end
    }
end

-- Thêm vào phần cuối file NebulaUI, trước return

-- Input Field Element
function NebulaUI:CreateInput(tab, text, placeholder, callback)
    local input = Instance.new("Frame")
    input.Name = "Input"
    input.Size = UDim2.new(1, 0, 0, 36)
    input.BackgroundColor3 = self.Config.Theme.Secondary
    input.BackgroundTransparency = 0.2
    input.Parent = tab.Content

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = input

    local inputText = Instance.new("TextLabel")
    inputText.Size = UDim2.new(0.4, -10, 1, 0)
    inputText.Position = UDim2.new(0, 10, 0, 0)
    inputText.BackgroundTransparency = 1
    inputText.Text = text
    inputText.TextColor3 = self.Config.Theme.Text
    inputText.TextSize = 14
    inputText.Font = Enum.Font.GothamMedium
    inputText.TextXAlignment = Enum.TextXAlignment.Left
    inputText.Parent = input

    local inputBox = Instance.new("TextBox")
    inputBox.Size = UDim2.new(0.6, -20, 0, 26)
    inputBox.Position = UDim2.new(0.4, 10, 0.5, -13)
    inputBox.BackgroundColor3 = self.Config.Theme.Primary
    inputBox.BackgroundTransparency = 0.1
    inputBox.Text = ""
    inputBox.PlaceholderText = placeholder or "Enter text..."
    inputBox.TextColor3 = self.Config.Theme.Text
    inputBox.PlaceholderColor3 = self.Config.Theme.TextDark
    inputBox.TextSize = 14
    inputBox.Font = Enum.Font.GothamMedium
    inputBox.Parent = input

    local inputBoxCorner = Instance.new("UICorner")
    inputBoxCorner.CornerRadius = UDim.new(0, 4)
    inputBoxCorner.Parent = inputBox

    -- Input Logic
    inputBox.FocusLost:Connect(function(enterPressed)
        if enterPressed and callback then
            callback(inputBox.Text)
        end
    end)

    return {
        Instance = input,
        GetText = function()
            return inputBox.Text
        end,
        SetText = function(text)
            inputBox.Text = text
            if callback then
                callback(text)
            end
        end,
        ClearText = function()
            inputBox.Text = ""
        end
    }
end

-- ColorPicker Element
function NebulaUI:CreateColorPicker(tab, text, default, callback)
    local colorPicker = Instance.new("Frame")
    colorPicker.Name = "ColorPicker"
    colorPicker.Size = UDim2.new(1, 0, 0, 36)
    colorPicker.BackgroundColor3 = self.Config.Theme.Secondary
    colorPicker.BackgroundTransparency = 0.2
    colorPicker.ClipsDescendants = true
    colorPicker.Parent = tab.Content

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = colorPicker

    local colorText = Instance.new("TextLabel")
    colorText.Size = UDim2.new(1, -60, 1, 0)
    colorText.Position = UDim2.new(0, 10, 0, 0)
    colorText.BackgroundTransparency = 1
    colorText.Text = text
    colorText.TextColor3 = self.Config.Theme.Text
    colorText.TextSize = 14
    colorText.Font = Enum.Font.GothamMedium
    colorText.TextXAlignment = Enum.TextXAlignment.Left
    colorText.Parent = colorPicker

    local preview = Instance.new("Frame")
    preview.Name = "Preview"
    preview.Size = UDim2.new(0, 30, 0, 30)
    preview.Position = UDim2.new(1, -40, 0.5, -15)
    preview.BackgroundColor3 = default or Color3.fromRGB(255, 255, 255)
    preview.Parent = colorPicker

    local previewCorner = Instance.new("UICorner")
    previewCorner.CornerRadius = UDim.new(0, 4)
    previewCorner.Parent = preview

    -- Color Picker Panel
    local panel = Instance.new("Frame")
    panel.Name = "Panel"
    panel.Size = UDim2.new(1, -20, 0, 150)
    panel.Position = UDim2.new(0, 10, 0, 46)
    panel.BackgroundColor3 = self.Config.Theme.Primary
    panel.BackgroundTransparency = 0.1
    panel.Visible = false
    panel.Parent = colorPicker

    local panelCorner = Instance.new("UICorner")
    panelCorner.CornerRadius = UDim.new(0, 6)
    panelCorner.Parent = panel

    -- Color Gradient
    local colorGradient = Instance.new("Frame")
    colorGradient.Size = UDim2.new(1, -20, 0, 100)
    colorGradient.Position = UDim2.new(0, 10, 0, 10)
    colorGradient.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    colorGradient.Parent = panel

    local colorCorner = Instance.new("UICorner")
    colorCorner.CornerRadius = UDim.new(0, 4)
    colorCorner.Parent = colorGradient

    local gradientFrame = Instance.new("Frame")
    gradientFrame.Size = UDim2.new(1, 0, 1, 0)
    gradientFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    gradientFrame.Parent = colorGradient

    local whiteGradient = Instance.new("UIGradient")
    whiteGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
    })
    whiteGradient.Transparency = NumberSequence.new({
        NumberSequenceKeypoint.new(0, 0),
        NumberSequenceKeypoint.new(1, 1)
    })
    whiteGradient.Parent = gradientFrame

    local blackGradient = Instance.new("UIGradient")
    blackGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0))
    })
    blackGradient.Transparency = NumberSequence.new({
        NumberSequenceKeypoint.new(0, 1),
        NumberSequenceKeypoint.new(1, 0)
    })
    blackGradient.Rotation = 90
    blackGradient.Parent = gradientFrame

    -- Hue Slider
    local hueSlider = Instance.new("Frame")
    hueSlider.Size = UDim2.new(1, -20, 0, 20)
    hueSlider.Position = UDim2.new(0, 10, 0, 120)
    hueSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    hueSlider.Parent = panel

    local hueCorner = Instance.new("UICorner")
    hueCorner.CornerRadius = UDim.new(0, 4)
    hueCorner.Parent = hueSlider

    local hueGradient = Instance.new("UIGradient")
    hueGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
        ColorSequenceKeypoint.new(0.167, Color3.fromRGB(255, 255, 0)),
        ColorSequenceKeypoint.new(0.333, Color3.fromRGB(0, 255, 0)),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
        ColorSequenceKeypoint.new(0.667, Color3.fromRGB(0, 0, 255)),
        ColorSequenceKeypoint.new(0.833, Color3.fromRGB(255, 0, 255)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
    })
    hueGradient.Parent = hueSlider

    -- Color Selection Logic
    local UserInputService = game:GetService("UserInputService")
    local isOpen = false
    local draggingHue = false
    local draggingColor = false
    local selectedColor = default or Color3.fromRGB(255, 255, 255)
    local hue, sat, val = Color3.toHSV(selectedColor)

    local function updateColor()
        local color = Color3.fromHSV(hue, sat, val)
        preview.BackgroundColor3 = color
        colorGradient.BackgroundColor3 = Color3.fromHSV(hue, 1, 1)
        if callback then
            callback(color)
        end
    end

    preview.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isOpen = not isOpen
            panel.Visible = isOpen
            if isOpen then
                colorPicker.Size = UDim2.new(1, 0, 0, 206)
            else
                colorPicker.Size = UDim2.new(1, 0, 0, 36)
            end
        end
    end)

    hueSlider.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingHue = true
        end
    end)

    colorGradient.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingColor = true
        end
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingHue = false
            draggingColor = false
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            if draggingHue then
                local x = (input.Position.X - hueSlider.AbsolutePosition.X) / hueSlider.AbsoluteSize.X
                hue = math.clamp(x, 0, 1)
                updateColor()
            elseif draggingColor then
                local x = (input.Position.X - colorGradient.AbsolutePosition.X) / colorGradient.AbsoluteSize.X
                local y = (input.Position.Y - colorGradient.AbsolutePosition.Y) / colorGradient.AbsoluteSize.Y
                sat = math.clamp(x, 0, 1)
                val = 1 - math.clamp(y, 0, 1)
                updateColor()
            end
        end
    end)

    return {
        Instance = colorPicker,
        SetColor = function(color)
            hue, sat, val = Color3.toHSV(color)
            updateColor()
        end,
        GetColor = function()
            return preview.BackgroundColor3
        end
    }
end


return NebulaUI
